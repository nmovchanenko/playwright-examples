name: QAAutomationMonolithDeploymentCriteria

on:
  schedule:
    - cron: "30 05 * * *" # Run every day at 00:30 AM EST

  workflow_dispatch:
    inputs:
      environment_name:
        description: "Select Environment"
        required: true
        type: choice
        default: "integration"
        options:
          - "staging"
          - "integration"
      scripts_scope:
        description: "Test scope to run"
        required: true
        type: choice
        default: "@deployment-criteria"
        options:
          - "@deployment-criteria"
          - "@monolith-nightly"
          - "@monolith-nightly-group-1"
          - "@monolith-nightly-group-2"
          - "@monolith-nightly-group-3"
          - "@monolith-nightly-quoteservice"
      enable_dispatch:
        description: "Enable repository dispatch?"
        required: true
        type: boolean
        default: true
      min_pass_rate:
        description: "Min pass rate to deploy"
        required: true
        type: number
        default: 80
      event_type:
        description: "Event type to dispatch"
        required: true
        type: string
        default: "PromoteToStaging"
      service_name:
        description: "Service name"
        required: true
        type: string
        default: "monolith"
      service_version:
        description: "Service version"
        required: true
        type: string
        default: "V1"

  repository_dispatch:
    types:
      - RunMonolithTests/*

permissions: write-all

env:
  environment_name: ${{ inputs.environment_name || 'integration' }}
  scripts_scope: ${{ inputs.scripts_scope || '@deployment-criteria'}}
  min_pass_rate: ${{ inputs.min_pass_rate || 80 }}
  event_type: ${{ inputs.event_type || 'PromoteToStaging' }}
  service_name: ${{ inputs.service_name || 'monolith' }}
  enable_dispatch: ${{ inputs.enable_dispatch }}
  service_version: ${{ inputs.service_version }}
  MAX_PARALLEL: ${{ inputs.max_parallel}}
  TEST_TAG: ${{ inputs.test_tag }}


jobs:
  monolith_test:
    name: IQuality Monolith Deployment Criteria Tests
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name || 'integration' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set first tests to run and remaining test list
        if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
        id: tr_id
        shell: bash
        run: |
          max=${{ env.MAX_PARALLEL }}
          testList=$(grep -r '<U.*>' ./tests/ | grep -E '${{ env.TEST_TAG }}' | sed 's/.*<//; s/>.*//' | tr '\n' '|' | sed 's/.$//')
          
          IFS='|' read -r -a elements <<< "$testList"
          next="${elements[0]}"

          for ((i=1; i<max; i++)); do
            next="$next|${elements[i]}"
          done

          remaining="${elements[max]}"

          for ((i=max+1; i<${#elements[@]}; i++)); do
            remaining="$remaining|${elements[i]}"
          done

          echo "NEXT_TESTS=$next" >> $GITHUB_ENV
          echo "LEFT_TESTS=$remaining" >> $GITHUB_ENV

      - name: Set env variables on repository dispatch
        if: ${{ github.event_name == 'repository_dispatch'}}
        run: |
          echo "Next tests: ${{ github.event.client_payload.nextTests }}, Left tests: ${{ github.event.client_payload.leftTests }}, Need to stop: ${{ github.event.client_payload.stop }}"
          echo "NEXT_TESTS=${{ github.event.client_payload.nextTests }}" >> $GITHUB_ENV
          echo "LEFT_TESTS=${{ github.event.client_payload.leftTests }}" >> $GITHUB_ENV
          echo "TEST_TAG=${{ github.event.client_payload.testTag }}" >> $GITHUB_ENV
          echo "MAX_PARALLEL=${{ github.event.client_payload.maxParallel }}" >> $GITHUB_ENV
          echo "STOP=${{ github.event.client_payload.stop }}" >> $GITHUB_ENV

      - name: Invoke AWS Step Function with inputs
        uses: ./.github/workflows/actions/run-tests.yml
        with:
          reportTitle: "Monolith Deployment Criteria Test Run"
          runTokenPrefix: "monolith-deployment-criteria-test"
          environment: ${{ env.environment_name}}
          testCaseIdentifiers: '["${{ env.scripts_scope }}"]'
          slackChannel: "TECH_QA_MONOLITH_DEPLOYMENT"
          AWS_ROLE_TO_ASSUME: "AWS_ROLE_TO_ASSUME"
          dispatchParams: '{ 
            "enabled": ${{ env.enable_dispatch }}, 
            "minPassRate": ${{ env.min_pass_rate }}, 
            "type": "${{ env.event_type }}/${{ env.service_name }}", 
            "version": "${{ env.service_version }}",
            "repo": "${{ github.repository }}",
            "githubToken": "${{ secrets.GITHUB_TOKEN }}"
          }'